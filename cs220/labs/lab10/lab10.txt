CS-220 Spring 2016 Lab 10 report		Due: April 15, 2016

Name: Austin Ward

1. Cut and paste a copy of your successful test.txt file that creates a texthex.txt 
   file that invokes the target function:
    

2. Notice that the target function in target.c ends with an "exit(0)" invocation.  The
   "exit(0)" causes the target function to return directly to the operating system cleanup
   routine instead of to the function that called "target".  If the target function had 
   ended with "return false" instead of "exit(0)", would target still run sucessfully?
   If not, what might happen and why?
    No it wouldn't, the return statement would be altered in either case to jump the address I've given it.

3. If target.c had used fgets instead of gets, would your buffer overflow attack have been succesful?
   Why or why not?
    No it wouldn't, because fgets specifies the length of the buffer.

4. Did the Makefile make this lab easier or harder to run?  Were you ever surprised
   at the dependencies that were built or rebuilt as a side effect of running the 
   make command with a specific target?  Is it worth the time to build a correct
   Makefile so that dependencies are automatically taken care of?
    Easier to run. I wasn't surprised. It is easier to work with a correct makefile.
   
5. Now that you know how to do a buffer overflow attack, could you do a buffer overflow
   attack on target WITHOUT looking at target.c?  If not, why not?  If so, what tools
   would you use to figure out what is in the "target" executable file?
    Yes it's possible, but harder. You'd need be able to check when the buffer overflows, so you can pinpoint and take advantage of that location.
